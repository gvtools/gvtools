En Andami, el class loader de cada plugin delega primero en el classloader del sistemaes decir, que si se ejecuta desde eclipse buscará por todos los jars que haya en el classpath del proyecto, y si se ejecuta desde la linea de comandos, buscará en la variable de entorno CLASSPATH o en el argumento -classpath que se pase como parámetro a java.

Si el class loader del sistema no satisface la búsqueda, se buscará en los jars especificados por el config.xml del plugin que intenta cargar la clase y si no se encuentra en dichos jars, se buscará en los jars de los plugins de los cuales depende el plugin que intenta cargar la clase.

Por otra parte, FMap tiene un directorio de drivers en los que vas dejando los jars y automáticamente los procesa FMap. Sin embargo, FMap no conoce que es usado por Andami, y de hecho, FMap puede ser usado desde otros entornos, por lo que no usa directamente el class loader del plugin que tiene la librería fmap.jar en el config.xml. Usa su propio class loader, que está definido en el proyecto driver-manager. Este class loader busca en los jars que hay en el mismo directorio del driver y de no encontrarla éstos, delega en el classloader padre. El class loader padre, en el caso de gvSIG con Andami es el class loader del plugin que accede al driver.
